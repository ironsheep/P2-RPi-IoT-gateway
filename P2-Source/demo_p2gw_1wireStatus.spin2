'' =================================================================================================
''
''   File....... demo_p2gw_1wireStatus.spin2
''   Purpose.... Demonstrate reading 1-wire sensor and sending values to RPi web-backend
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jan 2022
''   Updated.... 17 Jan 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

CON { RPi Gateway io pins }

  RX_GW    = 25  { I }                                          ' Raspberry Pi (RPi) Gateway
  TX_GW    = 24  { O }

  GW_BAUDRATE = 500_000   ' 500kb/s - allow P2 rx to keep up!

CON { 1-wire devices io pins }

  OW_PIN = 16

  MAX_DEVICE_SNS = 10

  MAX_DEVICE_SCRATCH_BYTES = 9

OBJ { Objects Used by this Object }

    IoT_GW      :   "isp_rpi_iot_gw"        ' serial I/O to/from RPi
    ds18s20_OW  :   "isp_ds18s20"           ' DS18S20 one-wire temp sensor
    strFmt      :   "isp_serial_singleton"  ' format to memory routines
    srchOW      :   "isp_ow_search"         '   search routines for 1-Wire

DAT { our hardware ID strings and 1-wire buffers, collection names }

bUseDelay       long    TRUE    ' 1-wire delay vs. poll
bShoudClear     long    TRUE    ' yes, clear terminal on start

sn_buff         long    0[MAX_DEVICE_SNS * 2]
sns_Ct          long    0

scratchBffr     byte    0[MAX_DEVICE_SCRATCH_BYTES]

p2HardwareID    byte    "P2 Edge - GWDemo4",0

statusFName     byte    "p2-1wireValues",0

tempStr         byte    "923.05 F",0
noDvcStr        byte    "- No Dvc -",0

CON

  FMT_BFFR_LEN = 80

VAR { demo buffers }

    byte    fmtBuffer[FMT_BFFR_LEN+1]

PUB main() | opStatus, nIdx, nCollId, pRetString, owStatus, nTics, tempC, tempF, pBffr, nLoopCt

    srchOW.start(OW_PIN, srchOW.PU_1K5)                         ' connect to 1W bus with internal pullup
    owStatus := srchOW.reset()                                  ' check for device
    if (owStatus == %10)                                        ' good 1W reset
        sns_Ct := srchOW.searchAll(@sn_buff, MAX_DEVICE_SNS)    ' read up to MAX_DEVICE_SNS serial #'s
        debug("* main: scan 1-wire found = [", udec_(sns_Ct), "]")

        waitms(250)

        srchOW.stop()   ' release pin

        if sns_Ct > 0
            '' DEMO tell our RPi send an email for us
            IoT_GW.startx(RX_GW, TX_GW, GW_BAUDRATE)

            ' (one time) tell the RPi about how to identify this hardware
            IoT_GW.identify(@p2HardwareID)

            ' fire up interface to the first found 1-wire device
            ds18s20_OW.start(OW_PIN, ds18s20_OW.PU_1K5)

            owStatus := ds18s20_OW.reset()
            waitms(250) ' wait bus settle

            if (owStatus <> ds18s20_OW.OW_GOOD_WITH_DVC)
                debug("* main: ERROR 1-wire [", sdec(owStatus), "]")
            else
                debug("* main: one-wire dvc(s) found")

            ' Establish write access to named collection in /status/ folder
            opStatus, nCollId := IoT_GW.fileAccess(IoT_GW.EFI_STATUS, IoT_GW.FM_WRITE_CREATE, @statusFName)
            if opStatus <> IoT_GW.OP_SUCCESS
                debug("* main: ERROR Failed to OPEN [", zstr_(@statusFName), "] for write!")
            else
                repeat nLoopCt from 1 to 30 ' (seconds) worth of reading
                    nTics := getct()                                                ' sync timing loop

                    tempC := ds18s20_OW.read_tca(bUseDelay, @sn_buff)                            ' read the temperature
                    tempF := tempC * 9 / 5 + 32_0000                              ' convert to Fahrenheit

                    pBffr := strFmt.sStr1(string("%6.2f C"), (tempC + 50)/100, @fmtBuffer)
                    debug("* main: 1-wire says [", zstr_(pBffr), "]")

                    pBffr := strFmt.sStr1(string("%6.2f F"), (tempF + 50)/100, @fmtBuffer)
                    debug("* main: 1-wire says [", zstr_(pBffr), "]")

                    ' write string value to collection
                    opStatus := IoT_GW.fileWriteString(nCollId, string("tempSensorStr"), pBffr)
                    if opStatus <> IoT_GW.OP_SUCCESS
                        debug("* main: Error Failed to write string value!")
                    else
                        debug("* main: SUCCESS - status value sent to RPi *")

                    waitct(nTics += CLK_FREQ * 2)                                       ' update every 2 seconds

            ' terminate communicaiton with our 1-wire device
            ds18s20_OW.stop()

            ' terminate communication with our gateway RPi
            IoT_GW.stop()

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
