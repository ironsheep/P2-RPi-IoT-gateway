'' =================================================================================================
''
''   File....... isp_ws2118_string.spin2
''   Purpose.... Our light string object (collected from jm_ class files)
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jan 2022
''   Updated.... 22 Jan 2022
''
'' =================================================================================================
CON { forwarded constants }

  BLACK      = LEDs.BLACK
  RED        = LEDs.RED
  GREEN      = LEDs.GREEN
  BLUE       = LEDs.BLUE
  WHITE      = LEDs.WHITE
  WHITE2     = LEDs.WHITE2
  CYAN       = LEDs.CYAN
  MAGENTA    = LEDs.MAGENTA
  YELLOW     = LEDs.YELLOW
  CHARTREUSE = LEDs.CHARTREUSE
  ORANGE     = LEDs.ORANGE
  AQUAMARINE = LEDs.AQUAMARINE
  PINK       = LEDs.PINK
  TURQUOISE  = LEDs.TURQUOISE
  REALWHITE  = LEDs.REALWHITE
  INDIGO     = LEDs.INDIGO
  VIOLET     = LEDs.VIOLET
  MAROON     = LEDs.MAROON
  BROWN      = LEDs.BROWN
  CRIMSON    = LEDs.CRIMSON
  PURPLE     = LEDs.PURPLE

CON { driver state enums }

#0, ST_UNKNOWN, ST_COLOR1, ST_COLOR2, ST_FLASH, ST_FADE, ST_CHASE, ST_TWINKLE, ST_OFF


OBJ { objects used by this object }

  timer : "jm_ez_timer"                                         '   simple delta timer
  LEDs  : "jm_rgbx_pixel"                                       ' * smart pixel driver
  prng  : "jm_prng"                                             '   random numbers

PUB null()

'' This is not a top level object

PUB start(nPin, nPixels)
'' Configure hardware resources allowing access to LED String
    actualPixelCt := nPixels
    txPin := npin

    ' set default colors
    color1rgbw := RED
    color2rgbw := BLUE
    ' set inital state
    state := ST_COLOR1
    setDelay(25)   ' 1/4 of [0-100]

    LEDs.start_2811(@pixbuf, nPixels, txPin, 5)                ' start pixel driver for WS2811 *
    ' start our state-machine task in own cog
    smCogId := cogspin(newcog, taskRunStateMachine(), @taskStack)
    if smCogId == -1    ' did fail?
        debug("!! ERROR filed to start RX-QUE task")

PUB stop()
'' Release hardware resources used by string
    if (smCogId)
        cogstop(smCogId - 1)
        smCogId := 0
    LEDs.stop()

PUB color1() : nColorRGBW
'' Return the current value for color1rgbw
    nColorRGBW := color1rgbw

PUB setColor1(nColorRGBW)
'' Set new value for color1rgbw
    color1rgbw := nColorRGBW

PUB color2() : nColorRGBW
'' Return the current value for color2rgbw
    nColorRGBW := color2rgbw

PUB setColor2(nColorRGBW)
'' Set new value for color2rgbw
    color2rgbw := nColorRGBW

PUB convRGBtoRGBW(nColorRGB) : nColorRGBW
'' Move from 24 to 32 bit colorspace
    nColorRGBW := nColorRGB << 8

PUB displayState() : nDesiredState
'' Return the last selected display state
    nDesiredState := state

PUB delay() : nDesiredDelay
'' Return the last set delay value
    nDesiredDelay := requestedDelay

PUB setDelay(tset)
'' Convert delay slider from 0..100 (tset) to delay for current state
  requestedDelay := tset

  case state
    ST_FLASH : delayInTics := map(tset, 0, 100, 5000,  500)
    ST_FADE : delayInTics := map(tset, 0, 100,   64,    8)
    ST_CHASE : delayInTics := map(tset, 0, 100, 1000,  100)
    ST_TWINKLE : delayInTics := map(tset, 0, 100, 1000,   50)
    other: delayInTics := map(tset, 0, 100, 1000,   50)

PUB setAll(rgbw)
'' Sets all channels to rgb
    LEDs.set_all(rgbw)

PUB off()
'' turn off string by showing black
  state := ST_OFF
  setAll(BLACK)

PUB flash()
'' Switch to flash mode
  state := ST_FLASH
  doFlash()

PUB fade()
'' Switch to fade mode
  state := ST_FADE
  doFade()

PUB chase()
'' Switch to chase mode
  state := ST_CHASE
  doChase()

PUB twinkle()
'' Switch to twinkle mode
  state := ST_TWINKLE
  doTwinkle()

CON { --- Private / Utility Methods --- }

PRI taskRunStateMachine()
' run our display statemachine
  repeat
    case state
      ST_COLOR1 : LEDs.set_all(color1rgbw)
      ST_COLOR2 : LEDs.set_all(color2rgbw)
      ST_FLASH : doFlash()
      ST_FADE : doFade()
      ST_CHASE : doChase()
      ST_TWINKLE : doTwinkle()


CON { object internal constants }

  MAX_PIXELS = 50
  'CMD_SIZE = 16

  STACK_SIZE_LONGS = 48   ' 48, 32 crashes!

var { internal object variables }

    long  phase
    long  direction

    long  state                                                   ' program state
    long  color1rgbw
    long  color2rgbw
    long  delayInTics

    long  dirty                                                   ' force update
    long  substate                                                ' program sub-state

    long  pixbuf[MAX_PIXELS]                                        ' pixel buffer
    long  actualPixelCt   ' actual pixels in string
    long  txPin   ' pin on which string is listening

DAT

    taskStack       long    0[STACK_SIZE_LONGS]
    smCogId         long    0
    requestedDelay  long    15  ' default display value

PRI map(value, inmin, inmax, outmin, outmax) : result
' Maps value in range inmin..inmax to new value in range outmin..outmax

  if (value <= inmin)
    result := outmin
  elseif (value >= inmax)
    result :=  outmax
  else
    result :=  (value-inmin) * (outmax-outmin) / (inmax-inmin) + outmin

PRI doFlash()

  if ((timer.millis() < delayInTics) && (dirty == false))             ' timer expired or update?
    return

  timer.start()
  dirty := false
  substate := (substate == 0) ? 1 : 0                           ' toggle substate

  LEDs.set_all(color1rgbw[substate])                               ' show color1rgbw or color2rgbw


PRI doFade()

  if ((timer.millis() < delayInTics) && (dirty == false))
    return

  timer.start()

  if (dirty)                                                    ' first run?
    phase, direction := 0, 1                                    '  set phase & direction
    dirty := false

  phase += direction                                            ' update phase
  LEDs.set_all(LEDs.morph(color1rgbw, color2rgbw, phase))             ' update color

  if (phase == 255)                                             ' check direction change
    direction := -1
  elseif (phase == 0)
    direction := 1


PRI doChase() | buf[4], ch

  if ((timer.millis() < delayInTics) && (dirty == false))
    return

  timer.start()
  dirty := false

  longfill(@buf, color2rgbw, 4)                                     ' fill w/background
  buf[substate] := color1rgbw                                       ' set foreground

  ch := 0                                                       ' start at front
  repeat actualPixelCt/4                                             ' fill buffer w/chase seq
    longmove(@pixbuf[ch], @buf, 4)
    ch += 4

  longmove(@pixbuf[ch], @buf, actualPixelCt-ch)                      ' finish partial sequence

  if (++substate == 4)                                          ' update substate
    substate := 0


PRI doTwinkle() | ch, level

  if ((timer.millis() < delayInTics) && (dirty == false))
    return

  timer.start()
  dirty := false

  repeat ch from 0 to actualPixelCt-1                                ' fill string
    level := prng.xrandomize(1, 4)                              ' 25 to 100%
    LEDs.set(ch, LEDs.scale_rgbw(color1rgbw, 64*level))


CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
