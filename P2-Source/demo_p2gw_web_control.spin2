'' =================================================================================================
''
''   File....... demo_p2gw_web_control.spin2
''   Purpose.... Demonstrate control of {} from RPi web-backend
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jan 2022
''   Updated.... 22 Jan 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

CON { RPi Gateway io pins }

  RX_GW    = 25  { I }                                          ' Raspberry Pi (RPi) Gateway
  TX_GW    = 24  { O }

  GW_BAUDRATE = 624_000   ' 624kb/s - allow P2 rx to keep up!

CON { LED String io pins }

    LED_TXD_PIN = 16

    MAX_LEDS = 50

    MAX_STRING_WORK_BYTES = 50

OBJ { Objects Used by this Object }

    IoT_GW      :   "isp_rpi_iot_gw"            ' serial I/O to/from RPi
    rxQue       :   "isp_queue_serial"          ' acces our received data
    ' our demo hardware
    LEDstr      :   "isp_ws2118_string"         ' string of 50 LED for demo
    strFmt      :   "isp_serial_singleton"  ' format to memory routines

DAT { our hardware ID strings and 1-wire buffers, collection names }

p2HardwareID    byte    "P2 Edge - GWDemo4",0

statusFName     byte    "p2-ledStatus",0
controlFName    byte    "p2-ledControl",0

stringWork      byte    0[MAX_STRING_WORK_BYTES+1]

CON

  MAX_NAME_IN_BYTES = 40
  MAX_VALUE_IN_BYTES = 128

VAR { demo buffers }

    byte    nameBuffer[MAX_NAME_IN_BYTES+1]
    byte    valueBuffer[MAX_VALUE_IN_BYTES+1]

PUB main() | eOpStatus, nIdx, nCollId, eRxQStatus, eCmdId, tmpVar

    '' DEMO send status values to a web page and act on control values sent by the web page
    IoT_GW.startx(RX_GW, TX_GW, GW_BAUDRATE)    ' tell singleton our pins and rate

    ' (one time) tell the RPi about how to identify this hardware
    IoT_GW.identify(@p2HardwareID)

    LEDstr.start(LED_TXD_PIN, MAX_LEDS)

    ' Establish write access to named collection in /status/ folder
    eOpStatus, nCollId := IoT_GW.fileAccess(IoT_GW.EFI_STATUS, IoT_GW.FM_WRITE_CREATE, @statusFName)
    if eOpStatus <> IoT_GW.OP_SUCCESS
        debug("* main: ERROR Failed to OPEN [", zstr_(@statusFName), "] for write!")
    else
        ' Write our current values to the status file
        updateOurStringStatus(nCollId)

        ' Establish listen access to named collection in /control/ folder
        ' this tell RPi to send content changes as they happen, "live"
        eOpStatus, nCollId := IoT_GW.fileAccess(IoT_GW.EFI_CONTROL, IoT_GW.FM_LISTEN, @controlFName)
        if eOpStatus <> IoT_GW.OP_SUCCESS
            debug("* main: ERROR Failed to OPEN [", zstr_(@controlFName), "] for listen!")
        else
            debug("* main: looping to handle control changes")
            repeat
                ' read our device status values and send
                ' check for and handle any control value changes
                if rxQue.haveControlUpdate()
                    eRxQStatus := rxQue.getControlAndValue(@nameBuffer, MAX_NAME_IN_BYTES, @valueBuffer, MAX_VALUE_IN_BYTES)
                    if eRxQStatus == rxQue.OP_SUCCESS
                        debug("* main: nameBuffer=[", zstr_(@nameBuffer), "], valueBuffer=[", zstr_(@valueBuffer), "]")
                        ' handle indirect return values
                        eCmdId := idCommand(@nameBuffer) ' convert command to enum
                        if eCmdId <> CMD_UNKNOWN
                            if eCmdId == CMD_COLOR1
                                ' have new Color1
                                debug("Color1: ", zstr_(@valueBuffer))
                                tmpVar := rxQue.hexadecimalForString(@valueBuffer)
                                tmpVar := LEDstr.convRGBtoRGBW(tmpVar)
                                LEDstr.setColor1(tmpVar)
                            elseif eCmdId == CMD_COLOR2
                                ' have new Color2
                                debug("Color2: ", zstr_(@valueBuffer))
                                tmpVar := rxQue.hexadecimalForString(@valueBuffer)
                                tmpVar := LEDstr.convRGBtoRGBW(tmpVar)
                                LEDstr.setColor2(tmpVar)
                            elseif eCmdId == CMD_DELAY
                                ' have new Delay Value
                                debug("Delay: ", zstr_(@valueBuffer))
                                tmpVar := rxQue.decimalForString(@valueBuffer)
                                LEDstr.setDelay(tmpVar)
                            elseif eCmdId == CMD_STATE
                                ' have new string display mode
                                tmpVar := rxQue.decimalForString(@valueBuffer)
                                debug("Mode: [", zstr_(@valueBuffer), "], enum=", udec_(tmpVar))
                                CASE_FAST tmpVar
                                    LEDstr.ST_COLOR1:
                                        debug(" setColor1")
                                        LEDstr.setAllColor1()
                                    LEDstr.ST_COLOR2:
                                        debug(" setColor2")
                                        LEDstr.setAllColor2()
                                    LEDstr.ST_FLASH:
                                        debug(" flash")
                                        LEDstr.flash()
                                    LEDstr.ST_FADE:
                                        debug(" fade")
                                        LEDstr.fade()
                                    LEDstr.ST_CHASE:
                                        debug(" chase")
                                        LEDstr.chase()
                                    LEDstr.ST_TWINKLE:
                                        debug(" twinkle")
                                        LEDstr.twinkle()
                                    LEDstr.ST_OFF:
                                        debug(" OFF")
                                        LEDstr.off()
                                    OTHER :
                                        debug(" Unknown")
                                        LEDstr.off()
                            else
                                debug("EEE - cmd" , udec(eCmdId), " NOT YET Supported!")


     ' terminate communication with our gateway RPi
    IoT_GW.stop()

PRI updateOurStringStatus(nCollId) : opStatus | tmpValue, pValStr
' write our status values to the specified collection
    ' now write a named LONG value to it
    tmpValue := LEDstr.color1RBGw()
    pValStr := colorAsHexString(tmpValue, @stringWork, MAX_STRING_WORK_BYTES)
    opStatus := IoT_GW.fileWriteString(nCollId, string("color1"), pValStr)
    if opStatus == IoT_GW.OP_SUCCESS
        tmpValue := LEDstr.color2RBGw()
        pValStr := colorAsHexString(tmpValue, @stringWork, MAX_STRING_WORK_BYTES)
        opStatus := IoT_GW.fileWriteString(nCollId, string("color2"), pValStr)
        if opStatus == IoT_GW.OP_SUCCESS
            tmpValue := LEDstr.delay()
            opStatus := IoT_GW.fileWriteLong(nCollId, string("delay"), tmpValue)
            if opStatus == IoT_GW.OP_SUCCESS
                tmpValue := LEDstr.displayState()
                opStatus := IoT_GW.fileWriteLong(nCollId, string("displayState"), tmpValue)

PRI colorAsHexString(nColor, pWorkBffr, nBffrLenMax) : pBffr | nIdx
    ' for now formatting rgbw as rgb (loosing w)
    pBffr := strFmt.sStr1(string("0x%06x"), nColor >> 8, pWorkBffr)
    repeat nIdx from 2 to strsize(pBffr) - 1
        ' replace leading spaces with zeros
        if BYTE[pBffr][nIdx] == $20     ' '
            BYTE[pBffr][nIdx] := $30    '0'
        else
            quit
    'debug("--> (", uhex_long_(nColor), ") str=[", zstr_(pBffr), "]")

CON { ----- Command Defs and Recognizer ----- }

CON { command Enum values }

' ------------------------------------------------------------
'   Adjust Command Set:
'    (1) add/remove enum
'    (2) add/remove entry             "name  BYTE  ENUM,CmdString,0"
'    (3) add/remove pointer to entry  "name WORD  @name"
' ------------------------------------------------------------
#0, CMD_UNKNOWN, CMD_COLOR1, CMD_COLOR2, CMD_DELAY, CMD_STATE

DAT { command string }

cmd1        BYTE    CMD_COLOR1, "color1",0
cmd2        BYTE    CMD_COLOR2, "color2",0
cmd3        BYTE    CMD_DELAY, "delay",0
cmd4        BYTE    CMD_STATE, "displayState",0

cmdTable    ' 1st table-entry must follow immediately
            WORD    @cmd1
' NOTE insert more commands here
            WORD    @cmd2
            WORD    @cmd3
            WORD    @cmd4
cmdTableEnd ' last entry must be immediately above this line
' ------------------------------------------------------------
cmdCt       BYTE    (@cmdTableEnd-@cmdTable) >> 1   ' div by 2
' ------------------------------------------------------------

PRI idCommand(pCmdStr) : eCmdIdValue | nIdx, pCmdEntry, pPossCmdStr
' identify command requested
    eCmdIdValue := CMD_UNKNOWN
    'debug("-? pCmdStr(", udec_(strsize(pCmdStr)), ")=[", zstr_(pCmdStr), "] ?-")
    'debug("-? Our tables: ", uhex_long_array(@cmdTable, 16), "] ?-")

    repeat nIdx from 0 to cmdCt - 1
        pCmdEntry := @@WORD[@cmdTable][nIdx] ' get byte ptr from table
        pPossCmdStr := @BYTE[pCmdEntry][1]  ' skip enumVal get byte ptr to cmd zstring
        'debug("-? Tbl[", udec_(nIdx), "] ", uhex_long(pCmdEntry), " [", zstr_(pPossCmdStr), "] ?-")
        'debug("-? pPossCmdStr(", udec_(strsize(pPossCmdStr)), ")=[", zstr_(pPossCmdStr), "] ?-")
        if strcomp(pCmdStr, pPossCmdStr)
            eCmdIdValue := BYTE[pCmdEntry][0]   ' do match, we have our value
            quit

    if eCmdIdValue == CMD_UNKNOWN
        debug("EEE idCommand: Unknown command cmd(", strsize(pCmdStr), ")=[", zstr_(pCmdStr), "]!")

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
